<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.demo.dao.log4j.ResLogMapper">
    <resultMap id="logResultMap" type="com.demo.pojo.log4j.ResLog">
        <id column="log_id" property="logId" javaType="Long" jdbcType="BIGINT"/>
        <result column="class" property="logModule" javaType="String" jdbcType="VARCHAR"/>
        <result column="method" property="logMethod" javaType="String" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" javaType="Date" jdbcType="TIMESTAMP"/>
        <result column="log_level" property="logLevel" javaType="String" jdbcType="VARCHAR"/>
        <result column="exception" property="logException" javaType="String" jdbcType="VARCHAR"/>
        <result column="msg" property="logMsg" javaType="String" jdbcType="VARCHAR"/>
        <result column="module_name" property="moduleName" javaType="String" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="baseSql" >
        LOGID as log_id ,CLASS as class ,METHOD as method ,CREATETIME as create_time,LOGLEVEL as log_level,EXCEPTION as exception ,MSG as msg,MODULENAME module_name
    </sql>
    <sql id="basePostgreSql" >
        log_id,class,method,create_time,log_level,exception,msg,module_name
    </sql>
    <select id="selectAll" parameterType="map" resultMap="logResultMap" databaseId="mysql">
        select
        <include refid="baseSql"/>
        from reslog
        <where>
            <if test="moduleName != null">
                and MODULENAME like concat('%',#{moduleName},'%')
            </if>
            <if test="logLevel != null">
                and LOGLEVEL = #{logLevel}
            </if>
            <if test="sTime != null">
                and CREATETIME <![CDATA[ >= ]]> #{sTime}
            </if>
            <if test="eTime != null">
                and CREATETIME <![CDATA[ <= ]]> #{eTime}
            </if>
        </where>
        order by CREATETIME desc
    </select>
    <select id="selectAll" parameterType="map" resultMap="logResultMap" databaseId="postgresql">
        select
        <include refid="basePostgreSql"/>
        from public.reslog
        <where>
            <if test="moduleName != null">
                and module_name like concat('%',#{moduleName},'%')
            </if>
            <if test="logLevel != null">
                and log_level = #{logLevel}
            </if>
            <if test="sTime != null">
                and create_time <![CDATA[ >= ]]> to_timestamp(#{sTime},'yyyy-MM-dd HH24:mi:ss')
            </if>
            <if test="eTime != null">
                and create_time <![CDATA[ <= ]]> to_timestamp(#{eTime},'yyyy-MM-dd HH24:mi:ss')
            </if>
        </where>
        order by create_time desc
    </select>
    <select id="selectAllCount" parameterType="map" resultType="java.lang.Long" databaseId="mysql">
        select
        count(1)
        from reslog
        <where>
            <if test="moduleName != null">
                and MODULENAME like concat('%',#{moduleName},'%')
            </if>
            <if test="logLevel != null">
                and LOGLEVEL = #{logLevel}
            </if>
            <if test="sTime != null">
                and CREATETIME <![CDATA[ >= ]]> #{sTime}
            </if>
            <if test="eTime != null">
                and CREATETIME <![CDATA[ <= ]]> #{eTime}
            </if>
        </where>
    </select>
    <select id="selectAllCount" parameterType="map" resultType="java.lang.Long" databaseId="postgresql">
        select
        count(1)
        from public.reslog
        <where>
            <if test="moduleName != null">
                and module_name = #{moduleName}
            </if>
            <if test="logLevel != null">
                and log_level = #{logLevel}
            </if>
            <if test="sTime != null">
                and create_time <![CDATA[ >= ]]> to_timestamp(#{sTime},'yyyy-MM-dd HH24:mi:ss')
            </if>
            <if test="eTime != null">
                and create_time <![CDATA[ <= ]]> to_timestamp(#{eTime},'yyyy-MM-dd HH24:mi:ss')
            </if>
        </where>
    </select>

    <select id="selectById" parameterType="java.lang.Long" resultMap="logResultMap" databaseId="mysql">
        select
        <include refid="baseSql"/>
        from reslog
        where LOGID = #{logId}
    </select>
    <select id="selectById" parameterType="java.lang.Long" resultMap="logResultMap" databaseId="postgresql">
        select
        <include refid="basePostgreSql"/>
        from public.reslog
        where log_id = #{logId}
    </select>
    <select id="selectByIds" parameterType="java.lang.String" resultMap="logResultMap" databaseId="mysql">
        select
        <include refid="baseSql"/>
        from reslog
        where LOGID in (
        <foreach collection="ids" item="id" index="index" separator="," >
            #{id,jdbcType=INTEGER}
        </foreach>
        )
    </select>
    <select id="selectByIds" resultMap="logResultMap" databaseId="postgresql">
        select
        <include refid="basePostgreSql"/>
        from public.reslog
        where log_id in (
        <foreach collection="ids" item="id" index="index" separator="," >
            #{id,jdbcType=INTEGER}
        </foreach>
        )
    </select>

    <delete id="deleteExpire" databaseId="mysql">
        delete from reslog where CREATETIME <![CDATA[ < ]]> DATE_SUB(CURDATE(),INTERVAL 3 month );
    </delete>
    <delete id="deleteExpire" databaseId="postgresql">
        delete from public.reslog where create_time <![CDATA[ < ]]> DATE(TO_CHAR(CURRENT_DATE + INTERVAL '-3 MONTH','YYYY-MM-DD'))
    </delete>

</mapper>

